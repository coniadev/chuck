{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Chuck Web Framework Note This framework is under active development, some of the listed features are still experimental and subject to change. Large parts of the documentation are missing. Router Middleware Validation via PHP attributes Logging","title":"Introduction"},{"location":"#chuck-web-framework","text":"Note This framework is under active development, some of the listed features are still experimental and subject to change. Large parts of the documentation are missing. Router Middleware Validation via PHP attributes Logging","title":"Chuck Web Framework"},{"location":"cli/","text":"Command Line Interface php run server","title":"Cli"},{"location":"cli/#command-line-interface","text":"php run server","title":"Command Line Interface"},{"location":"configuraton/","text":"Configuration Add config example.","title":"Configuraton"},{"location":"configuraton/#configuration","text":"Add config example.","title":"Configuration"},{"location":"contributing/","text":"Contributing Style Guide All pull requests must adhere to the PSR-12 standard . Unit Testing All pull requests must be accompanied by passing unit tests, complete code coverage and static analysis running without errors. Chuck uses Pest for testing and Psalm as static analyzer. ( Learn more about Pest ( Learn more about Psalm Run the test suit with ./vendor/bin/pest or ./vendor/bin/pest --coverage . Test suite requirements Install PHP 8.1+ with the required extensions (see a Ubuntu example below) PostgreSQL and MySQL/MariaDB for full coverage. Composer (https://getcomposer.org/download/) Clone this repository Then composer install Ubuntu 22.04 LTS example: apt install php8.1-cli php8.1-sqlite3 php8.1-pgsql php8.1-mysql \\ php8.1-gd php8.1-pcov php8.1-curl php8.1-xml php8.1-zip The database servers: apt install mariadb-server postgresql sqlite3 Coverage Coverage relies on the PHP extension pcov . Note: Full coverage may only be reported if all three supported PDO drivers are installed which are sqlite, pgsql and mysql, and all test databases are set up. See next section. Create test databases: SQLite will be created automatically in the system's temp directory. PostgreSQL: CREATE DATABASE chuck_test_db; CREATE ROLE chuck_test_user LOGIN PASSWORD 'chuck_test_password'; GRANT ALL PRIVILEGES ON DATABASE chuck_test_db TO chuck_test_user; MariaDB/MySQL CREATE DATABASE chuck_test_db; CREATE USER chuck_test_user@localhost IDENTIFIED BY 'chuck_test_password'; GRANT ALL ON chuck_test_db.* TO chuck_test_user@localhost; These default credentials can be overwritten using the following environment variables: DB_HOST DB_NAME DB_USER DB_PASSWORD Temporary files Running the test suite will create some temporary files. We try to clean them up, but in case of failing tests they might remain in the file system: TODO: list them Static analysis Chuck uses Psalm as static analyzer. Currently set to level 1 and reportMixedIssues=\"false\" Run: ./vendor/bin/psalm --no-cache Psalm and suppressing readonly property errors At the time of writing Psalm does not support readonly properties which are not initialized in the constructor. The maintainers suggest to suppress errors is the only appropriate way. Recheck on occasion. Possible Errors: InaccessibleProperty MissingConstructor RedundantPropertyInitializationCheck See: https://github.com/vimeo/psalm/issues/7608","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#style-guide","text":"All pull requests must adhere to the PSR-12 standard .","title":"Style Guide"},{"location":"contributing/#unit-testing","text":"All pull requests must be accompanied by passing unit tests, complete code coverage and static analysis running without errors. Chuck uses Pest for testing and Psalm as static analyzer. ( Learn more about Pest ( Learn more about Psalm Run the test suit with ./vendor/bin/pest or ./vendor/bin/pest --coverage .","title":"Unit Testing"},{"location":"contributing/#test-suite-requirements","text":"Install PHP 8.1+ with the required extensions (see a Ubuntu example below) PostgreSQL and MySQL/MariaDB for full coverage. Composer (https://getcomposer.org/download/) Clone this repository Then composer install Ubuntu 22.04 LTS example: apt install php8.1-cli php8.1-sqlite3 php8.1-pgsql php8.1-mysql \\ php8.1-gd php8.1-pcov php8.1-curl php8.1-xml php8.1-zip The database servers: apt install mariadb-server postgresql sqlite3","title":"Test suite requirements"},{"location":"contributing/#coverage","text":"Coverage relies on the PHP extension pcov . Note: Full coverage may only be reported if all three supported PDO drivers are installed which are sqlite, pgsql and mysql, and all test databases are set up. See next section.","title":"Coverage"},{"location":"contributing/#create-test-databases","text":"SQLite will be created automatically in the system's temp directory. PostgreSQL: CREATE DATABASE chuck_test_db; CREATE ROLE chuck_test_user LOGIN PASSWORD 'chuck_test_password'; GRANT ALL PRIVILEGES ON DATABASE chuck_test_db TO chuck_test_user; MariaDB/MySQL CREATE DATABASE chuck_test_db; CREATE USER chuck_test_user@localhost IDENTIFIED BY 'chuck_test_password'; GRANT ALL ON chuck_test_db.* TO chuck_test_user@localhost; These default credentials can be overwritten using the following environment variables: DB_HOST DB_NAME DB_USER DB_PASSWORD","title":"Create test databases:"},{"location":"contributing/#temporary-files","text":"Running the test suite will create some temporary files. We try to clean them up, but in case of failing tests they might remain in the file system: TODO: list them","title":"Temporary files"},{"location":"contributing/#static-analysis","text":"Chuck uses Psalm as static analyzer. Currently set to level 1 and reportMixedIssues=\"false\" Run: ./vendor/bin/psalm --no-cache","title":"Static analysis"},{"location":"contributing/#psalm-and-suppressing-readonly-property-errors","text":"At the time of writing Psalm does not support readonly properties which are not initialized in the constructor. The maintainers suggest to suppress errors is the only appropriate way. Recheck on occasion. Possible Errors: InaccessibleProperty MissingConstructor RedundantPropertyInitializationCheck See: https://github.com/vimeo/psalm/issues/7608","title":"Psalm and suppressing readonly property errors"},{"location":"database/","text":"Databases/SQL","title":"Database"},{"location":"database/#databasessql","text":"","title":"Databases/SQL"},{"location":"fileuploads/","text":"File Uploads Request helper: if ($request->hasFile('fieldname')) { $file = $request->file('fieldname'); if ($file->isValid()) { $file->move('/new/path'); } } Uploaded via HTML array, like <input type=\"file\" name=\"fieldname[]\"/> : if ($request->hasFile('fieldname') && $request->hasMultipleFiles('fieldname')) { $files = $request->files('fieldname'); foreach ($files as $file) { if ($file->isValid()) { $file->move('/new/path/' . $file->name); } } }","title":"Fileuploads"},{"location":"fileuploads/#file-uploads","text":"Request helper: if ($request->hasFile('fieldname')) { $file = $request->file('fieldname'); if ($file->isValid()) { $file->move('/new/path'); } } Uploaded via HTML array, like <input type=\"file\" name=\"fieldname[]\"/> : if ($request->hasFile('fieldname') && $request->hasMultipleFiles('fieldname')) { $files = $request->files('fieldname'); foreach ($files as $file) { if ($file->isValid()) { $file->move('/new/path/' . $file->name); } } }","title":"File Uploads"},{"location":"logging/","text":"Logging","title":"Logging"},{"location":"logging/#logging","text":"","title":"Logging"},{"location":"middleware/","text":"Middleware: use Conia\\Chuck\\{App, Config, Route, Request}; class Middleware { public function __invoke(Request $request, callable $next) { // ... do something before the next $resujlt = $next($request); // ... do something after the next return $result; } } $app = App::create(new Config('chuck')); $app->middleware(new Middleware()); // Route specific middleware $app->route('/', function (Request $request) {})->middleware( function (Request $request, callable $next): $request { return $next($request); }); $app->run();","title":"Middleware"},{"location":"middleware/#middleware","text":"use Conia\\Chuck\\{App, Config, Route, Request}; class Middleware { public function __invoke(Request $request, callable $next) { // ... do something before the next $resujlt = $next($request); // ... do something after the next return $result; } } $app = App::create(new Config('chuck')); $app->middleware(new Middleware()); // Route specific middleware $app->route('/', function (Request $request) {})->middleware( function (Request $request, callable $next): $request { return $next($request); }); $app->run();","title":"Middleware:"},{"location":"renderers/","text":"Renderers Builtin JsonRenderer TextRenderer Write your own renderer","title":"Renderers"},{"location":"renderers/#renderers","text":"Builtin JsonRenderer TextRenderer Write your own renderer","title":"Renderers"},{"location":"request/","text":"Request","title":"Request"},{"location":"request/#request","text":"","title":"Request"},{"location":"response/","text":"Response","title":"Response"},{"location":"response/#response","text":"","title":"Response"},{"location":"routing/","text":"Routing // Single route $route = Route::get(/', function (Request $request) { return [1, 2, 3]; })->render('json'); $app->addRoute($route); $route = (new Route('/', function (Request $request) {}))->method('GET','POST'); // Route groups $app->group(new Group('admin:', '/admin/', function (Group $group) { $group->addRoute(Route::get(...); $group->addRoute(Route::post(...); // helpers $group->get('/api/users', () => []); $group->post('/api/users', () => []); });","title":"Routing"},{"location":"routing/#routing","text":"// Single route $route = Route::get(/', function (Request $request) { return [1, 2, 3]; })->render('json'); $app->addRoute($route); $route = (new Route('/', function (Request $request) {}))->method('GET','POST'); // Route groups $app->group(new Group('admin:', '/admin/', function (Group $group) { $group->addRoute(Route::get(...); $group->addRoute(Route::post(...); // helpers $group->get('/api/users', () => []); $group->post('/api/users', () => []); });","title":"Routing"},{"location":"validation/","text":"Validation","title":"Validation"},{"location":"validation/#validation","text":"","title":"Validation"}]}